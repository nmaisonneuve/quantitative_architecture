getwd()
setwd("~/work/temporal_analysis")
source("genereate_histogram.r")
source("generate_histogram.r")
library(RJSON)
library("RJSON")
library("rjson")
cluster_images <- lapply(cluster_list, FUN=function(cluster_id){
filename = data.filtered[data.filtered$detector_id == cluster_id,]$filename
entropy = best_cluster_entropy[best_cluster_entropy$id==cluster_id,]$entropy
return (list(id=cluster_id, images = filename, entropy=entropy))
})
sink(paste(base_dir, "clusters.json",sep=""))
cat(toJSON(cluster_images))
sink()
source("generate_histogram.r")
histogram = ddply(data.filtered,.(detector_id), .fun=histogram)
d.entropy = dpply(histogram,.(detector_id), fun=entropy)
d.entropy = ddply(histogram,.(detector_id), fun=entropy)
d.entropy
histogram
ata.filtered
data.filtered
data <- read.csv("data/temporal_table_only_available_clusters.csv")
data$period_f = factor(data$period, levels = c(1,2,3,5,6,7,8,9,10,11,99), labels = time_period_labels)
threshold = 0.5
data.filtered = ddply(data,.(detector_id), .fun=function(sub_data){
cluster.filtered = score_filtering(sub_data,threshold)
return(cluster.filtered)
})
histogram = ddply(data.filtered,.(detector_id), .fun=histogram)
histogram<-function (data){
# mapping labels with their associated nb of occurences for each period of time
count <- vapply(time_period_labels, 1,
FUN = function(y) {
count = length(which(data$period_f == y))
return(count)
},USE.NAMES = FALSE)
# normalizing
density = count / sum(count)
histo <- data.frame(period = time_period, freq = count, dens = density)
return (histo)
}
histogram = ddply(data.filtered,.(detector_id), .fun=histogram)
histogram
data.filtered
data <- read.csv("data/temporal_table_only_available_clusters.csv")
head(data)
dim(data)
